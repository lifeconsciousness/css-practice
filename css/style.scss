body{
    margin: 0;
    padding: 0;
    min-height: 200vh;
    background-color: rgb(57, 56, 55);
    overflow-x: hidden;
}



////////////////flex practice///////////////
.flex-item{
    width: 7em;
    height: 7em;
    background-color: rgb(0, 0, 0);
    border: 2px solid white;
    color: white;

    text-align: center;
    line-height: 7em;  //center text in div vertically
}

.flex-practice-container{
    width: 50%;
    margin: 0 auto;
    display: flex;
    flex-direction: row;
    // flex-direction: row-reverse;
    padding: 1em;
    height: 50vh;
    border: 1px solid white;

    gap: 1em;
    row-gap: 1em;
    column-gap: 1em;

    align-items: center;
    justify-content: space-evenly;

    flex-wrap: wrap; //or wrap-reverse
    // align-content: center;   
    // works only when flex wrap is wrap, not to be confused with align items
}

.first{
    align-self: flex-start;
    justify-self: flex-start;
    flex-grow: 1;
    //it's better not to use order property if not necessary
    order: -1;  // -1 is a default value for the first element       

}
.third{
    align-self: flex-end;
    flex-grow: 3; 
    flex-shrink: 1;
    order: -2;
}


////////////////////////////////////////////


////////////////units///////////////////////

.theoretical-element{
    width: 3em;         //em is relative to the parent's font size
    height: 3rem;       //rem is relative to the standart html font size

    //for font-size it's better to use REM to have accessibility features working
    //for paddings and margin it's better to use EM because it becomes relative to the element's font size and changes dinamically
}

.text-description{
    max-width: 60ch; //ch is amount of characters per line
}


///////////position sticky///////////////////

.sticky-element{
    position: sticky;
    top: 6px;
    width: 30%;
    height: 30%;
    // background-color: white;
}


//responsive font size 
html {
    font-size: 16px;
}
@media screen and (min-width: 320px) {
    html {
        font-size: calc(16px + 6 * ((100vw - 320px) / 680));
    }
}
@media screen and (min-width: 1000px) {
    html {
        font-size: 22px;
    }
}



//grid

.grid-container{
    margin: 0 auto;
    margin-top: 4rem;
    width: 80%;
    min-height: 400px;
    display: grid;


    //auto-fit makes grid responsive
    grid-template-columns: repeat(5, minmax(100px, 1fr));
    grid-template-rows: repeat(5, 1fr);  




    grid-template-areas: 
        'header header header header header'
        'aside main main main main'
        'aside main main main main'
        'aside main main main main'
        'footer footer footer footer footer';


    //        row   col
    // grid-gap: 1rem .5rem; 

    place-items: center;
    // align-items: center;
    // justify-items: center;

    grid-auto-flow: column; //auto row begins to be active when there are more items in grid than cells
    //default for auto-flow is row
    grid-auto-columns: 2fr;
    grid-auto-rows: 2fr;
}

.element1{
    background-color: wheat;
    width: 100%;
    height: 100%;
    // grid-column: 1/2;
    // grid-row: 1/3;

    //span is essentially element's width and height in grid tiles
    // grid-column: span 3;
    // grid-row: span 2;

    grid-area: header;
}

.element2{
    background-color: azure;
    width: 100%;
    height: 100%;
    
    grid-area: aside;
    // grid-area: 4 / 5 / 6 / 6; //row-start_col-start_row-end_col-end
}

.element3{
    // height: 50%;
    width: 70%;
    background-color: black;
    grid-area: footer;
    justify-self: start;
    align-self: stretch;
}




.grid-container-resp{
    margin: 0 auto;
    margin-top: 4rem;
    width: 80%;
    min-height: 400px;
    display: grid;


    //auto-fit makes grid responsive
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-template-rows: repeat(5, 1fr);  

    place-items: center;
    grid-gap: 1rem;

    .element{
        background-color: antiquewhite;
        width: 100%;
        height: 100%;
    }
}